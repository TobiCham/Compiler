package com.tobi.mc.parser.ast.lexer

internal object LexerConstants {
    const val ERROR_NO_MATCH = "Error: could not match input"
    /** This character denotes the end of file  */
    const val YYEOF = -1
    /** initial size of the lookahead buffer  */
    const val ZZ_BUFFERSIZE = 16384
    /** lexical states  */
    const val YYINITIAL = 0
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    val ZZ_LEXSTATE = intArrayOf(
        0, 0
    )
    /**
     * Translates characters to character classes
     */
    const val ZZ_CMAP_PACKED =
        "\u0009\u0000\u0001\u0003\u0001\u0002\u0001\u001f\u0001\u0020\u0001\u0001\u0012\u0000\u0001\u0003\u0001\u0024\u0001\u001d" +
        "\u0002\u0000\u0001\u002d\u0002\u0000\u0001\u002a\u0001\u002b\u0001\u000c\u0001\u0006\u0001\u0028\u0001\u002c\u0001\u0000" +
        "\u0001\u000b\u000a\u0004\u0001\u0029\u0001\u0025\u0001\u0021\u0001\u0022\u0001\u0023\u0002\u0000\u0004\u0005\u0001\u0005" +
        "\u0001\u0005\u0005\u0005\u0001\u0009\u0008\u0005\u0001\u0009\u0005\u0005\u0001\u0000\u0001\u001e\u0002\u0000\u0001\u0005" +
        "\u0001\u0000\u0001\u000d\u0001\u0010\u0001\u0014\u0001\u001a\u0001\u0012\u0001\u0007\u0001\u0005\u0001\u001c\u0001\u0016" +
        "\u0001\u0005\u0001\u0013\u0001\u0008\u0001\u0005\u0001\u0015\u0001\u000f\u0002\u0005\u0001\u0011\u0001\u0017\u0001\u000e" +
        "\u0001\u000a\u0001\u0019\u0001\u001b\u0001\u0018\u0002\u0005\u0001\u0026\u0001\u0000\u0001\u0027\u0007\u0000\u0001\u001f" +
        "\u1fa2\u0000\u0001\u001f\u0001\u001f\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000" +
        "\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\uffff\u0000\udfe6\u0000"
    /**
     * Translates DFA states to action switch labels.
     */
    val ZZ_ACTION = intArrayOf(0, 1, 2, 3, 4, 5, 4, 6, 7, 4, 4, 4, 4, 4, 4, 4, 4, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 4, 2, 0, 4, 4, 4, 4, 4, 4, 21, 4, 4, 4, 0, 22, 0, 23, 24, 25, 26, 4, 2, 0, 0, 4, 4, 4, 4, 4, 4, 27, 4, 4, 4, 0, 28, 4, 4, 29, 4, 4, 30, 4, 4, 31, 4, 4, 4, 32, 4, 33, 34, 4, 4, 4, 35, 36)
    /**
     * Translates a state to a row index in the transition table
     */
    val ZZ_ROWMAP = intArrayOf(0, 46, 46, 92, 138, 46, 184, 230, 46, 276, 322, 368, 414, 460, 506, 552, 598, 644, 690, 736, 782, 828, 46, 46, 46, 46, 46, 46, 46, 46, 46, 874, 920, 966, 1012, 1058, 1104, 1150, 1196, 1242, 1288, 138, 1334, 1380, 1426, 644, 46, 1472, 46, 46, 46, 46, 1518, 1564, 1610, 1656, 1702, 1748, 1794, 1840, 1886, 1932, 138, 1978, 2024, 2070, 2116, 138, 2162, 2208, 138, 2254, 2300, 138, 2346, 2392, 138, 2438, 2484, 2530, 138, 2576, 138, 138, 2622, 2668, 2714, 138, 138)

    /**
     * The transition table of the DFA
     */
    val ZZ_TRANS = intArrayOf(1, -1, 2, 2, 3, 4, 5, 6, 4, 4, 4, 7, 8, 9, 4, 4, 10, 11, 12, 4, 13, 4, 14, 4, 4, 15, 4, 16, 4, 17, 1, -1, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 31, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 32, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 35, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 36, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 37, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 38, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 39, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 41, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 42, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 43, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 52, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 53, 2, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 56, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 57, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 58, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 59, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 60, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 61, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 62, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 63, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 64, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 65, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 66, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 67, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 68, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 69, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 70, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 71, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 72, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 73, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 74, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 75, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 2, 66, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 76, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 77, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 78, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 79, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 80, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 81, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 82, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 83, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 84, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 85, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 86, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 87, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, 4, 4, 4, 4, -1, -1, 4, 4, 4, 4, 4, 88, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state `aState`
     */
    val ZZ_ATTRIBUTE = intArrayOf(0, 9, 9, 1, 1, 9, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 9, 0, 9, 9, 9, 9, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

    fun getCMapAtIndex(index: Int): Int {
        var i = 0 /* index in packed string  */
        var j = 0 /* index in unpacked array */
        while (i < 180) {
            val count = ZZ_CMAP_PACKED[i++].toInt()
            val value = ZZ_CMAP_PACKED[i++]

            if(index >= j && index < j + count) {
                return value.toInt()
            }
            j += count
        }
        throw IndexOutOfBoundsException("$index out of bounds")
    }
}