//package com.tobi.mc.parser.ast.parser;

import com.tobi.mc.ParseException;
import com.tobi.mc.computable.*;
import com.tobi.mc.computable.data.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbol;
import java.util.function.BiFunction;
import java.util.function.Function;

parser code {:
    private void throwException(String message) throws ParseException {
        ComplexSymbol symbol = (ComplexSymbol) this.getStack().peek();
        throw new ParseException(message, null, symbol.getLocationRight());
    }
    private void throwException(String message, int stackIndex) throws ParseException {
        ComplexSymbol symbol = (ComplexSymbol) this.getStack().elementAt(stackIndex);
        throw new ParseException(message, null, symbol.getLocationRight());
    }
    private boolean isString(DataComputable computable) {
        return computable instanceof DataTypeString || computable instanceof StringConcat ||computable instanceof GetVariable || computable instanceof FunctionCall;
    }
    private boolean isMath(DataComputable computable) {
        return computable instanceof DataTypeInt || computable instanceof MathOperation || computable instanceof UnaryMinus || computable instanceof Negation ||computable instanceof GetVariable || computable instanceof FunctionCall;
    }
    private boolean isCallable(DataComputable computable) {
        return computable instanceof GetVariable || computable instanceof FunctionCall;
    }
    private MathOperation createMath(int stackTop, DataComputable arg1, DataComputable arg2, BiFunction<DataComputable, DataComputable, MathOperation> createMath) throws ParseException {
        if(!isMath(arg1)) throwException("Invalid math expression", stackTop - 2);
        if(!isMath(arg2)) throwException("Invalid math expression");

        return createMath.apply(arg1, arg2);
    }
    private DataComputable createMath(DataComputable arg, Function<DataComputable, DataComputable> createMath) throws ParseException {
        if(!isMath(arg)) throwException("Invalid math expression");

        return createMath.apply(arg);
    }
:}

terminal IDENTIFIER, CONSTANT, TEXT, LE_OP, GE_OP, EQ_OP, NE_OP, EXTERN, AUTO, INT, STRING, VOID, FUNCTION, IF, ELSE, WHILE, CONTINUE, BREAK, RETURN, COMMA, MINUS, ADD, MULTIPLY, DIVIDE, MOD, GREATER_THAN, LESS_THAN, SEMI_COLON, ASSIGNMENT, LEFT_CURLY, RIGHT_CURLY, LEFT_BRACKET, RIGHT_BRACKET, NOT, STRING_CONCAT;

nonterminal DataType dataType;

nonterminal DataTypeInt integer;
nonterminal DataTypeString string;

nonterminal Parameter parameter;
nonterminal List<Parameter> functionParams;

nonterminal FunctionDeclaration functionDeclaration;
nonterminal List<DataComputable> functionArgs;

nonterminal GetVariable getVariable;
nonterminal SetVariable setVariable;
nonterminal DefineVariable defineVariable;

nonterminal FunctionCall functionCall;

nonterminal DataComputable dataComputable;
nonterminal DataComputable mathComputable;

nonterminal Computable expression;
nonterminal Computable terminatedExpression;

nonterminal ExpressionSequence expressionSequence;
nonterminal List<Computable> expressionList;

nonterminal ContinueStatement continueStatement;
nonterminal BreakStatement breakStatement;
nonterminal ReturnExpression returnExpression;

nonterminal WhileLoop whileLoop;
nonterminal IfStatement ifStatement;

nonterminal Program program;
nonterminal FunctionPrototype functionPrototype;

precedence nonassoc IF;
precedence nonassoc ELSE;

precedence left STRING_CONCAT;
precedence left EQ_OP, NE_OP, LESS_THAN, GREATER_THAN, LE_OP, GE_OP;
precedence left ADD, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right MINUS, NOT;
precedence nonassoc LEFT_BRACKET;


start with program;

program ::= expressionList:list {: RESULT = new Program(new ExpressionSequence(list), new DefaultContext()); :};

dataType ::=
    STRING {: RESULT = DataType.STRING; :} |
    INT {: RESULT = DataType.INT; :} |
    FUNCTION {: RESULT = DataType.FUNCTION; :} |
    VOID {: RESULT = DataType.VOID; :} |
    AUTO {: RESULT = null; :};

integer ::= CONSTANT:value {: RESULT = new DataTypeInt((long) value); :};
string ::= TEXT:value {: RESULT = new DataTypeString((String) value); :};

parameter ::= dataType:type IDENTIFIER:name {:
    if(type == DataType.VOID) throwException("Can't define a parameter type as void");
    else if(type == null) throwException("Can't define a parameter type as auto");

    RESULT = new Parameter(type, (String) name);
:};
functionParams ::=
    parameter:param {: RESULT = new ArrayList<Parameter>(); RESULT.add(param); :} |
    functionParams:params COMMA parameter:param {: params.add(param); RESULT = params; :};

getVariable ::= IDENTIFIER:name {: RESULT = new GetVariable((String) name, -1); :};
setVariable ::= IDENTIFIER:name ASSIGNMENT dataComputable:assignment {:
    RESULT = new SetVariable((String) name, -1, assignment);
:};
defineVariable ::=
    dataType:type IDENTIFIER:name ASSIGNMENT dataComputable:value {:
        if(type == DataType.VOID) {
            throwException("Cannot define variables as void");
        }
        RESULT = new DefineVariable((String) name, value, type);
    :}
    |
    dataType:type IDENTIFIER:name {:
        if(type == null) {
            throwException("Cannot define late init variables as auto");
        }
        throwException("Late init variables are not yet supported");
    :};

dataComputable ::=
    LEFT_BRACKET dataComputable:exp RIGHT_BRACKET {: RESULT = exp; :} |
    string:str {: RESULT = str; :} |
    functionCall:call {: RESULT = call; :} |
    getVariable:variable {: RESULT = variable; :} |
    dataComputable:exp1 STRING_CONCAT dataComputable:exp2 {:
        if(!isString(exp1)) throwException("Can only concatenate strings", stackTop - 2);
        if(!isString(exp2)) throwException("Can only concatenate strings");
        RESULT = new StringConcat(exp1, exp2);
    :} |
    mathComputable:math {: RESULT = math; :};

mathComputable ::=
    integer:value {: RESULT = value; :} |
    MINUS dataComputable:math {: RESULT = createMath(math, UnaryMinus::new); :} |
    NOT dataComputable:math {: RESULT = createMath(math, Negation::new); :} |
    dataComputable:arg1 ADD dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, Add::new); :} |
    dataComputable:arg1 MINUS dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, Subtract::new); :} |
    dataComputable:arg1 MULTIPLY dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, Multiply::new); :} |
    dataComputable:arg1 DIVIDE dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, Divide::new); :} |
    dataComputable:arg1 MOD dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, Mod::new); :} |
    dataComputable:arg1 EQ_OP dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, Equals::new); :} |
    dataComputable:arg1 NE_OP dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, NotEquals::new); :} |
    dataComputable:arg1 LESS_THAN dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, LessThan::new); :} |
    dataComputable:arg1 GREATER_THAN dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, GreaterThan::new); :} |
    dataComputable:arg1 LE_OP dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, LessThanOrEqualTo::new); :} |
    dataComputable:arg1 GE_OP dataComputable:arg2 {: RESULT = createMath(stackTop, arg1, arg2, GreaterThanOrEqualTo::new); :};

functionCall ::=
    dataComputable:func LEFT_BRACKET functionArgs:args RIGHT_BRACKET {:
        if(!isCallable(func)) throwException("Not callable", stackTop - 3);
        RESULT = new FunctionCall(func, args);
    :} |
    dataComputable:func LEFT_BRACKET RIGHT_BRACKET {:
        if(!isCallable(func)) throwException("Not callable", stackTop - 2);
        RESULT = new FunctionCall(func, new ArrayList<>());
    :};

functionArgs ::=
    dataComputable:arg {:
        RESULT = new ArrayList<DataComputable>();
        RESULT.add(arg);
    :}
    |
    functionArgs:args COMMA dataComputable:arg {:
        args.add(arg);
        RESULT = args;
    :};

functionDeclaration ::=
    dataType:returnType IDENTIFIER:name LEFT_BRACKET functionParams:params RIGHT_BRACKET expressionSequence:body {:
        RESULT = new FunctionDeclaration((String) name, params, body, returnType);
    :}
    |
    dataType:returnType IDENTIFIER:name LEFT_BRACKET RIGHT_BRACKET expressionSequence:body {:
        RESULT = new FunctionDeclaration((String) name, new ArrayList<>(), body, returnType);
    :};

terminatedExpression ::=
    setVariable:setVar {: RESULT = setVar; :} |
    defineVariable:def {: RESULT = def; :} |
    dataComputable:data {: RESULT = data; :} |
    breakStatement:statement {: RESULT = statement; :} |
    continueStatement:statement {: RESULT = statement; :} |
    returnExpression:exp {: RESULT = exp; :} |
    functionPrototype:prototype {: RESULT = prototype; :};

expression ::=
    terminatedExpression:exp SEMI_COLON {: RESULT = exp; :} |
    functionDeclaration:def {: RESULT = def; :} |
    whileLoop:loop {: RESULT = loop; :} |
    ifStatement:ifStatement {: RESULT = ifStatement; :};

expressionList ::=
    expression:exp {: RESULT = new ArrayList<Computable>(); RESULT.add(exp); :} |
    expressionList:list expression:exp {: list.add(exp); RESULT = list; :};

expressionSequence ::=
    LEFT_CURLY RIGHT_CURLY {: RESULT = new ExpressionSequence(new ArrayList<Computable>()); :}
    |
    LEFT_CURLY expressionList:list RIGHT_CURLY {: RESULT = new ExpressionSequence(list); :}
    |
    expression:exp {:
        List<Computable> list = new ArrayList<Computable>();
        list.add(exp);
        RESULT = new ExpressionSequence(list);
    :};

whileLoop ::= WHILE LEFT_BRACKET dataComputable:condition RIGHT_BRACKET expressionSequence:body {:
    if(!isMath(condition)) throwException("Invalid condition", stackTop - 2);
    RESULT = new WhileLoop(condition, body);
:};

ifStatement ::=
    IF LEFT_BRACKET dataComputable:condition RIGHT_BRACKET expressionSequence:body ELSE expressionSequence:elseBody {:
        if(!isMath(condition)) throwException("Invalid condition", stackTop - 4);
        RESULT = new IfStatement(condition, body, elseBody);
    :}
    |
    IF LEFT_BRACKET dataComputable:condition RIGHT_BRACKET expressionSequence:body {:
        if(!isMath(condition)) throwException("Invalid condition", stackTop - 2);
        RESULT = new IfStatement(condition, body, null);
    :};

returnExpression ::=
    RETURN dataComputable:toReturn {: RESULT = new ReturnExpression(toReturn); :} |
    RETURN {: RESULT = new ReturnExpression(null); :};

breakStatement ::= BREAK {: RESULT = BreakStatement.INSTANCE; :};
continueStatement ::= CONTINUE {: RESULT = ContinueStatement.INSTANCE; :};

functionPrototype ::=
    dataType:returnType IDENTIFIER:name LEFT_BRACKET functionParams:params RIGHT_BRACKET {:
        RESULT = new FunctionPrototype((String) name, params, returnType);
    :}
    |
    dataType:returnType IDENTIFIER:name LEFT_BRACKET RIGHT_BRACKET {:
        RESULT = new FunctionPrototype((String) name, new ArrayList<>(), returnType);
    :};