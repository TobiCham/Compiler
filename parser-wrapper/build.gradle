import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'c'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('com.google.code.gson:gson:2.8.6')
}

jar {
    manifest {
        attributes "Main-Class": "com.tobi.mc.parser.ParserMain"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/parser/shared").absolutePath
}

tasks.withType(JavaExec) {
    systemProperty "java.library.path", file("${buildDir}/libs/parser/shared").absolutePath
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
    components {
        parser(NativeLibrarySpec) {
            targetPlatform "x64"

            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${Jvm.current().javaHome}/include"
                    cCompiler.args "-I${Jvm.current().javaHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

task copyJar(type: Copy) {
    from "$buildDir/libs/parser-wrapper.jar"
    into "$rootDir/libs"
}
task copyNatives(type: Copy) {
    from "$buildDir/libs/parser/shared"
    into "$rootDir/libs"
}
build {
    finalizedBy(copyJar, copyNatives)
}
test.dependsOn 'parserSharedLibrary'
